import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Load dataset (replace 'sales_data.csv' with your actual dataset file)
# The dataset should have columns like 'Advertising_Budget' and 'Sales'.
data = pd.read_csv('sales_data.csv')

# Display the first few rows of the dataset
print(data.head())

# Features (independent variables) and target (dependent variable)
X = data[['Advertising_Budget']]  # Replace with relevant feature column(s)
y = data['Sales']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Linear Regression model
model = LinearRegression()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the testing data
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"R-squared: {r2:.2f}")

# Visualize the results
plt.scatter(X_test, y_test, color='blue', label='Actual Sales')
plt.plot(X_test, y_pred, color='red', label='Predicted Sales')
plt.title('Sales Prediction using Linear Regression')
plt.xlabel('Advertising Budget')
plt.ylabel('Sales')
plt.legend()
plt.show()

# Predict sales for a new advertising budget (example: 500)
new_budget = np.array([[500]])  # Replace 500 with your budget value
predicted_sales = model.predict(new_budget)
print(f"Predicted Sales for an Advertising Budget of 500: {predicted_sales[0]:.2f}")
